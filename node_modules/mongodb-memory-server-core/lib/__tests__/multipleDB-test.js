"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var mongodb_1 = require("mongodb");
var MongoMemoryServer_1 = __importDefault(require("../MongoMemoryServer"));
jasmine.DEFAULT_TIMEOUT_INTERVAL = 600000;
var con1;
var con2;
var db1;
var db2;
var mongoServer1;
var mongoServer2;
beforeAll(function () { return __awaiter(void 0, void 0, void 0, function () {
    var mongoUri, _a, _b, mongoUri2, _c, _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                mongoServer1 = new MongoMemoryServer_1.default();
                return [4 /*yield*/, mongoServer1.getUri()];
            case 1:
                mongoUri = _e.sent();
                return [4 /*yield*/, mongodb_1.MongoClient.connect(mongoUri, {
                        useNewUrlParser: true,
                        useUnifiedTopology: true,
                    })];
            case 2:
                con1 = _e.sent();
                _b = (_a = con1).db;
                return [4 /*yield*/, mongoServer1.getDbName()];
            case 3:
                db1 = _b.apply(_a, [_e.sent()]);
                mongoServer2 = new MongoMemoryServer_1.default();
                return [4 /*yield*/, mongoServer2.getUri()];
            case 4:
                mongoUri2 = _e.sent();
                return [4 /*yield*/, mongodb_1.MongoClient.connect(mongoUri2, {
                        useNewUrlParser: true,
                        useUnifiedTopology: true,
                    })];
            case 5:
                con2 = _e.sent();
                _d = (_c = con2).db;
                return [4 /*yield*/, mongoServer1.getDbName()];
            case 6:
                db2 = _d.apply(_c, [_e.sent()]);
                return [2 /*return*/];
        }
    });
}); });
afterAll(function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (con1) {
                    con1.close();
                }
                if (con2) {
                    con2.close();
                }
                if (!mongoServer1) return [3 /*break*/, 2];
                return [4 /*yield*/, mongoServer1.stop()];
            case 1:
                _a.sent();
                _a.label = 2;
            case 2:
                if (!mongoServer2) return [3 /*break*/, 4];
                return [4 /*yield*/, mongoServer2.stop()];
            case 3:
                _a.sent();
                _a.label = 4;
            case 4: return [2 /*return*/];
        }
    });
}); });
describe('Multiple mongoServers', function () {
    it('should start several servers', function () { return __awaiter(void 0, void 0, void 0, function () {
        var col1, result1, _a, col2, result2, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    expect(db1).toBeDefined();
                    col1 = db1.collection('test');
                    return [4 /*yield*/, col1.insertMany([{ a: 1 }, { b: 1 }])];
                case 1:
                    result1 = _c.sent();
                    expect(result1.result).toMatchSnapshot();
                    _a = expect;
                    return [4 /*yield*/, col1.countDocuments({})];
                case 2:
                    _a.apply(void 0, [_c.sent()]).toBe(2);
                    expect(db2).toBeDefined();
                    col2 = db2.collection('test');
                    return [4 /*yield*/, col2.insertMany([{ a: 2 }, { b: 2 }])];
                case 3:
                    result2 = _c.sent();
                    expect(result2.result).toMatchSnapshot();
                    _b = expect;
                    return [4 /*yield*/, col2.countDocuments({})];
                case 4:
                    _b.apply(void 0, [_c.sent()]).toBe(2);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should have different uri', function () { return __awaiter(void 0, void 0, void 0, function () {
        var uri1, uri2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, mongoServer1.getUri()];
                case 1:
                    uri1 = _a.sent();
                    return [4 /*yield*/, mongoServer2.getUri()];
                case 2:
                    uri2 = _a.sent();
                    expect(uri1).not.toEqual(uri2);
                    return [2 /*return*/];
            }
        });
    }); });
    it('v6.0.0 adds "?" to the connection string (uri)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var uri1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, mongoServer1.getUri()];
                case 1:
                    uri1 = _a.sent();
                    expect(uri1.includes('?')).toBeTruthy();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=multipleDB-test.js.map