"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
jasmine.DEFAULT_TIMEOUT_INTERVAL = 600000;
describe('MongoMemoryServer', function () {
    var MongoMemoryServer;
    beforeEach(function () {
        jest.resetModules();
        MongoMemoryServer = jest.requireActual('../MongoMemoryServer').default;
    });
    describe('start()', function () {
        it('should resolve to true if an MongoInstanceData is resolved by _startUpInstance', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mongoServer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        MongoMemoryServer.prototype._startUpInstance = jest.fn(function () { return Promise.resolve({}); });
                        mongoServer = new MongoMemoryServer({ autoStart: false });
                        expect(MongoMemoryServer.prototype._startUpInstance).toHaveBeenCalledTimes(0);
                        return [4 /*yield*/, expect(mongoServer.start()).resolves.toEqual(true)];
                    case 1:
                        _a.sent();
                        expect(MongoMemoryServer.prototype._startUpInstance).toHaveBeenCalledTimes(1);
                        return [2 /*return*/];
                }
            });
        }); });
        it('_startUpInstance should be called a second time if an error is thrown on the first call and assign the current port to nulll', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mongoServer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        MongoMemoryServer.prototype._startUpInstance = jest
                            .fn()
                            .mockRejectedValueOnce(new Error('Mongod shutting down'))
                            .mockResolvedValueOnce({});
                        mongoServer = new MongoMemoryServer({
                            autoStart: false,
                            instance: {
                                port: 123,
                            },
                        });
                        expect(MongoMemoryServer.prototype._startUpInstance).toHaveBeenCalledTimes(0);
                        return [4 /*yield*/, expect(mongoServer.start()).resolves.toEqual(true)];
                    case 1:
                        _a.sent();
                        expect(MongoMemoryServer.prototype._startUpInstance).toHaveBeenCalledTimes(2);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should throw an error if _startUpInstance throws an unknown error', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mongoServer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        MongoMemoryServer.prototype._startUpInstance = jest
                            .fn()
                            .mockRejectedValueOnce(new Error('unknown error'));
                        console.warn = jest.fn(); // mock it to prevent writing to console
                        mongoServer = new MongoMemoryServer({
                            autoStart: false,
                            instance: {
                                port: 123,
                            },
                        });
                        expect(MongoMemoryServer.prototype._startUpInstance).toHaveBeenCalledTimes(0);
                        return [4 /*yield*/, expect(mongoServer.start()).rejects.toThrow('unknown error')];
                    case 1:
                        _a.sent();
                        expect(MongoMemoryServer.prototype._startUpInstance).toHaveBeenCalledTimes(1);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('ensureInstance()', function () {
        it('should throw an error if not instance is running after calling start', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mongoServer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        MongoMemoryServer.prototype.start = jest.fn(function () { return Promise.resolve(true); });
                        mongoServer = new MongoMemoryServer({ autoStart: false });
                        return [4 /*yield*/, expect(mongoServer.ensureInstance()).rejects.toThrow('Ensure-Instance failed to start an instance!')];
                    case 1:
                        _a.sent();
                        expect(MongoMemoryServer.prototype.start).toHaveBeenCalledTimes(1);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('stop()', function () {
        it('should stop mongod and answer on isRunning() method', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mongod;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mongod = new MongoMemoryServer({
                            autoStart: false,
                        });
                        expect(mongod.getInstanceInfo()).toBeFalsy();
                        mongod.start();
                        // while mongod launching `getInstanceInfo` is false
                        expect(mongod.getInstanceInfo()).toBeFalsy();
                        // when instance launched then data became avaliable
                        return [4 /*yield*/, mongod.ensureInstance()];
                    case 1:
                        // when instance launched then data became avaliable
                        _a.sent();
                        expect(mongod.getInstanceInfo()).toBeDefined();
                        // after stop, instance data should be empty
                        return [4 /*yield*/, mongod.stop()];
                    case 2:
                        // after stop, instance data should be empty
                        _a.sent();
                        expect(mongod.getInstanceInfo()).toBeFalsy();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('create()', function () {
        // before each for sanity (overwrite protection)
        beforeEach(function () {
            // de-duplicate code
            MongoMemoryServer.prototype.start = jest.fn(function () { return Promise.resolve(true); });
        });
        it('should create an instance but not autostart', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, MongoMemoryServer.create()];
                    case 1:
                        _a.sent();
                        expect(MongoMemoryServer.prototype.start).toHaveBeenCalledTimes(0);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should autostart and be awaitable', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, MongoMemoryServer.create({ autoStart: true })];
                    case 1:
                        _a.sent();
                        expect(MongoMemoryServer.prototype.start).toHaveBeenCalledTimes(1);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('getUri()', function () {
        it('"getUri" should return with "otherDb"', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mongoServer, port, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, MongoMemoryServer.create({ autoStart: true })];
                    case 1:
                        mongoServer = _b.sent();
                        return [4 /*yield*/, mongoServer.getPort()];
                    case 2:
                        port = _b.sent();
                        _a = expect;
                        return [4 /*yield*/, mongoServer.getUri('customDB')];
                    case 3:
                        _a.apply(void 0, [_b.sent()]).toBe("mongodb://127.0.0.1:" + port + "/customDB?");
                        return [4 /*yield*/, mongoServer.stop()];
                    case 4:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=MongoMemoryServer-test.js.map