"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var MongoMemoryServer_1 = __importDefault(require("./MongoMemoryServer"));
var db_util_1 = require("./util/db_util");
var debug_1 = __importDefault(require("debug"));
var mongodb_1 = require("mongodb");
var util_1 = require("util");
var log = debug_1.default('MongoMS:MongoMemoryReplSet');
/**
 * Class for managing an replSet
 */
var MongoMemoryReplSet = /** @class */ (function (_super) {
    __extends(MongoMemoryReplSet, _super);
    function MongoMemoryReplSet(opts) {
        if (opts === void 0) { opts = {}; }
        var _this = _super.call(this) || this;
        _this.servers = [];
        var replSetDefaults = {
            auth: false,
            args: [],
            name: 'testset',
            count: 1,
            dbName: db_util_1.generateDbName(),
            ip: '127.0.0.1',
            oplogSize: 1,
            spawn: {},
            storageEngine: 'ephemeralForTest',
            configSettings: {},
        };
        _this._state = 'stopped';
        _this.opts = {
            binary: opts.binary || {},
            instanceOpts: opts.instanceOpts || [],
            replSet: __assign(__assign({}, replSetDefaults), opts.replSet),
        };
        if (!_this.opts.replSet.args) {
            _this.opts.replSet.args = [];
        }
        _this.opts.replSet.args.push('--oplogSize', "" + _this.opts.replSet.oplogSize);
        if (!(opts && opts.autoStart === false)) {
            log('Autostarting MongoMemoryReplSet.');
            setTimeout(function () { return _this.start(); }, 0);
        }
        process.once('beforeExit', _this.stop);
        return _this;
    }
    /**
     * Get the Connection String for mongodb to connect
     * @param otherDb use a different database than what was set on creation?
     * @deprecated
     */
    MongoMemoryReplSet.prototype.getConnectionString = function (otherDb) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, util_1.deprecate(this.getUri, '"MongoMemoryReplSet.getConnectionString" is deprecated, use ".getUri"', 'MDEP001').call(this, otherDb)];
            });
        });
    };
    /**
     * Returns database name.
     */
    MongoMemoryReplSet.prototype.getDbName = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // this function is only async for consistency with MongoMemoryServer
                // I don't see much point to either of them being async but don't
                // care enough to change it and introduce a breaking change.
                return [2 /*return*/, this.opts.replSet.dbName];
            });
        });
    };
    /**
     * Returns instance options suitable for a MongoMemoryServer.
     * @param baseOpts Options to merge with
     */
    MongoMemoryReplSet.prototype.getInstanceOpts = function (baseOpts) {
        if (baseOpts === void 0) { baseOpts = {}; }
        var rsOpts = this.opts.replSet;
        var opts = {
            auth: !!rsOpts.auth,
            args: rsOpts.args,
            dbName: rsOpts.dbName,
            ip: rsOpts.ip,
            replSet: rsOpts.name,
            storageEngine: rsOpts.storageEngine,
        };
        if (baseOpts.args) {
            opts.args = (rsOpts.args || []).concat(baseOpts.args);
        }
        if (baseOpts.port) {
            opts.port = baseOpts.port;
        }
        if (baseOpts.dbPath) {
            opts.dbPath = baseOpts.dbPath;
        }
        if (baseOpts.storageEngine) {
            opts.storageEngine = baseOpts.storageEngine;
        }
        log('   instance opts:', opts);
        return opts;
    };
    /**
     * Returns a mongodb: URI to connect to a given database.
     * @param otherDb use a different database than what was set on creation?
     */
    MongoMemoryReplSet.prototype.getUri = function (otherDb) {
        return __awaiter(this, void 0, void 0, function () {
            var dbName, ports, hosts;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this._state === 'init')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._waitForPrimary()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (this._state !== 'running') {
                            throw new Error('Replica Set is not running. Use debug for more info.');
                        }
                        if (otherDb) {
                            dbName = typeof otherDb === 'string' ? otherDb : db_util_1.generateDbName();
                        }
                        else {
                            dbName = this.opts.replSet.dbName;
                        }
                        return [4 /*yield*/, Promise.all(this.servers.map(function (s) { return s.getPort(); }))];
                    case 3:
                        ports = _a.sent();
                        hosts = ports.map(function (port) { return "127.0.0.1:" + port; }).join(',');
                        return [2 /*return*/, "mongodb://" + hosts + "/" + dbName + "?replicaSet=" + this.opts.replSet.name];
                }
            });
        });
    };
    /**
     * Start underlying `mongod` instances.
     */
    MongoMemoryReplSet.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            var servers, cnt, server;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        log('start');
                        if (this._state !== 'stopped') {
                            throw new Error("Already in 'init' or 'running' state. Use debug for more info.");
                        }
                        this.emit((this._state = 'init'));
                        log('init');
                        servers = this.opts.instanceOpts.map(function (opts) {
                            log('  starting server from instanceOpts:', opts, '...');
                            return _this._initServer(_this.getInstanceOpts(opts));
                        });
                        cnt = this.opts.replSet.count || 1;
                        while (servers.length < cnt) {
                            log("  starting server " + (servers.length + 1) + " of " + cnt + "...");
                            server = this._initServer(this.getInstanceOpts({}));
                            servers.push(server);
                        }
                        // ensures all servers are listening for connection
                        return [4 /*yield*/, Promise.all(servers.map(function (s) { return s.start(); }))];
                    case 1:
                        // ensures all servers are listening for connection
                        _a.sent();
                        this.servers = servers;
                        return [4 /*yield*/, this._initReplSet()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Stop the underlying `mongod` instance(s).
     */
    MongoMemoryReplSet.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            var servers;
            var _this = this;
            return __generator(this, function (_a) {
                if (this._state === 'stopped') {
                    return [2 /*return*/, false];
                }
                servers = this.servers;
                this.servers = [];
                process.removeListener('beforeExit', this.stop); // many accumulate inside tests
                return [2 /*return*/, Promise.all(servers.map(function (s) { return s.stop(); }))
                        .then(function () {
                        _this.emit((_this._state = 'stopped'));
                        return true;
                    })
                        .catch(function (err) {
                        log(err);
                        _this.emit((_this._state = 'stopped'), err);
                        return false;
                    })];
            });
        });
    };
    /**
     * Wait until all instances are running
     */
    MongoMemoryReplSet.prototype.waitUntilRunning = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // TODO: this seems like it dosnt catch if an instance fails, and runs forever
                        if (this._state === 'running') {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, new Promise(function (resolve) { return _this.once('running', function () { return resolve(); }); })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Connects to the first server from the list of servers and issues the `replSetInitiate`
     * command passing in a new replica set configuration object.
     */
    MongoMemoryReplSet.prototype._initReplSet = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uris, MongoClient, e_1, conn, db, admin, members, rsConfig, e_2, oldConfig;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._state !== 'init') {
                            throw new Error('Not in init phase.');
                        }
                        log('Initializing replica set.');
                        if (!this.servers.length) {
                            throw new Error('One or more servers are required.');
                        }
                        return [4 /*yield*/, Promise.all(this.servers.map(function (server) { return server.getUri(); }))];
                    case 1:
                        uris = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, Promise.resolve().then(function () { return __importStar(require('mongodb')); })];
                    case 3:
                        MongoClient = (_a.sent()).MongoClient;
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        throw new Error("You need to install \"mongodb\" package. It's required for checking ReplicaSet state.");
                    case 5: return [4 /*yield*/, MongoClient.connect(uris[0], {
                            useNewUrlParser: true,
                            useUnifiedTopology: true,
                        })];
                    case 6:
                        conn = _a.sent();
                        _a.label = 7;
                    case 7:
                        _a.trys.push([7, , 18, 20]);
                        return [4 /*yield*/, conn.db(this.opts.replSet.dbName)];
                    case 8:
                        db = _a.sent();
                        admin = db.admin();
                        members = uris.map(function (uri, idx) { return ({ _id: idx, host: db_util_1.getHost(uri) }); });
                        rsConfig = {
                            _id: this.opts.replSet.name,
                            members: members,
                            settings: __assign({ electionTimeoutMillis: 500 }, (this.opts.replSet.configSettings || {})),
                        };
                        _a.label = 9;
                    case 9:
                        _a.trys.push([9, 11, , 16]);
                        return [4 /*yield*/, admin.command({ replSetInitiate: rsConfig })];
                    case 10:
                        _a.sent();
                        return [3 /*break*/, 16];
                    case 11:
                        e_2 = _a.sent();
                        if (!(e_2 instanceof mongodb_1.MongoError && e_2.errmsg == 'already initialized')) return [3 /*break*/, 14];
                        log(e_2.errmsg + ": trying to set old config");
                        return [4 /*yield*/, admin.command({ replSetGetConfig: 1 })];
                    case 12:
                        oldConfig = (_a.sent()).config;
                        log('got old config:\n', oldConfig);
                        return [4 /*yield*/, admin.command({
                                replSetReconfig: oldConfig,
                                force: true,
                            })];
                    case 13:
                        _a.sent();
                        return [3 /*break*/, 15];
                    case 14: throw e_2;
                    case 15: return [3 /*break*/, 16];
                    case 16:
                        log('Waiting for replica set to have a PRIMARY member.');
                        return [4 /*yield*/, this._waitForPrimary()];
                    case 17:
                        _a.sent();
                        this.emit((this._state = 'running'));
                        log('running');
                        return [3 /*break*/, 20];
                    case 18: return [4 /*yield*/, conn.close()];
                    case 19:
                        _a.sent();
                        return [7 /*endfinally*/];
                    case 20: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Create the one Instance (without starting them)
     * @param instanceOpts Instance Options to use for this instance
     */
    MongoMemoryReplSet.prototype._initServer = function (instanceOpts) {
        var serverOpts = {
            autoStart: false,
            binary: this.opts.binary,
            instance: instanceOpts,
            spawn: this.opts.replSet.spawn,
        };
        var server = new MongoMemoryServer_1.default(serverOpts);
        return server;
    };
    /**
     * Wait until the replSet has elected an Primary
     * @param timeout Timeout to not run infinitly
     */
    MongoMemoryReplSet.prototype._waitForPrimary = function (timeout) {
        if (timeout === void 0) { timeout = 30000; }
        return __awaiter(this, void 0, void 0, function () {
            var timeoutId, timeoutPromise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        timeoutPromise = new Promise(function (resolve, reject) {
                            timeoutId = setTimeout(function () {
                                reject('Timed out in ' + timeout + 'ms. When waiting for primary.');
                            }, timeout);
                        });
                        return [4 /*yield*/, Promise.race(__spreadArrays(this.servers.map(function (server) {
                                var instanceInfo = server.getInstanceInfo();
                                if (!instanceInfo) {
                                    throw new Error('_waitForPrimary - instanceInfo not present ');
                                }
                                return instanceInfo.instance.waitPrimaryReady();
                            }), [
                                timeoutPromise,
                            ]))];
                    case 1:
                        _a.sent();
                        if (timeoutId != null) {
                            clearTimeout(timeoutId);
                        }
                        log('_waitForPrimary detected one primary instance ');
                        return [2 /*return*/];
                }
            });
        });
    };
    return MongoMemoryReplSet;
}(events_1.EventEmitter));
exports.default = MongoMemoryReplSet;
//# sourceMappingURL=MongoMemoryReplSet.js.map