/// <reference types="node" />
import { EventEmitter } from 'events';
import MongoMemoryServer from './MongoMemoryServer';
import { MongoBinaryOpts } from './util/MongoBinary';
import { MongoMemoryInstancePropT, MongoMemoryInstancePropBaseT, SpawnOptions, StorageEngineT } from './types';
/**
 * Replica set specific options.
 */
export interface ReplSetOpts {
    /**
     * enable auth ("--auth" / "--noauth")
     * @default false
     */
    auth?: boolean;
    /**
     * additional command line args passed to `mongod`
     * @default []
     */
    args?: string[];
    /**
     * number of `mongod` servers to start
     * @default 1
     */
    count?: number;
    /**
     * database name used in connection string
     * @default uuidv4()
     */
    dbName?: string;
    /**
     * bind to all IP addresses specify `::,0.0.0.0`
     * @default '127.0.0.1'
     */
    ip?: string;
    /**
     * replSet name
     * @default 'testset'
     */
    name?: string;
    /**
     * oplog size (in MB)
     * @default 1
     */
    oplogSize?: number;
    /**
     * Childprocess spawn options
     * @default {}
     */
    spawn?: SpawnOptions;
    /**
     *`mongod` storage engine type
     * @default 'ephemeralForTest'
     */
    storageEngine?: StorageEngineT;
    /**
     * Options for "rsConfig"
     * @default {}
     */
    configSettings?: MongoMemoryReplSetConfigSettingsT;
}
/**
 * Options for "rsConfig"
 */
export interface MongoMemoryReplSetConfigSettingsT {
    chainingAllowed?: boolean;
    heartbeatTimeoutSecs?: number;
    heartbeatIntervalMillis?: number;
    electionTimeoutMillis?: number;
    catchUpTimeoutMillis?: number;
}
/**
 * Options for the replSet
 */
export interface MongoMemoryReplSetOptsT {
    instanceOpts?: MongoMemoryInstancePropBaseT[];
    binary?: MongoBinaryOpts;
    replSet?: ReplSetOpts;
    /**
     * Auto-Start the replSet?
     * @default true
     */
    autoStart?: boolean;
}
/**
 * Class for managing an replSet
 */
export default class MongoMemoryReplSet extends EventEmitter {
    servers: MongoMemoryServer[];
    opts: {
        instanceOpts: MongoMemoryInstancePropBaseT[];
        binary: MongoBinaryOpts;
        replSet: Required<ReplSetOpts>;
        autoStart?: boolean;
    };
    _state: 'init' | 'running' | 'stopped';
    constructor(opts?: MongoMemoryReplSetOptsT);
    /**
     * Get the Connection String for mongodb to connect
     * @param otherDb use a different database than what was set on creation?
     * @deprecated
     */
    getConnectionString(otherDb?: string | boolean): Promise<string>;
    /**
     * Returns database name.
     */
    getDbName(): Promise<string>;
    /**
     * Returns instance options suitable for a MongoMemoryServer.
     * @param baseOpts Options to merge with
     */
    getInstanceOpts(baseOpts?: MongoMemoryInstancePropBaseT): MongoMemoryInstancePropT;
    /**
     * Returns a mongodb: URI to connect to a given database.
     * @param otherDb use a different database than what was set on creation?
     */
    getUri(otherDb?: string | boolean): Promise<string>;
    /**
     * Start underlying `mongod` instances.
     */
    start(): Promise<void>;
    /**
     * Stop the underlying `mongod` instance(s).
     */
    stop(): Promise<boolean>;
    /**
     * Wait until all instances are running
     */
    waitUntilRunning(): Promise<void>;
    /**
     * Connects to the first server from the list of servers and issues the `replSetInitiate`
     * command passing in a new replica set configuration object.
     */
    _initReplSet(): Promise<void>;
    /**
     * Create the one Instance (without starting them)
     * @param instanceOpts Instance Options to use for this instance
     */
    _initServer(instanceOpts: MongoMemoryInstancePropT): MongoMemoryServer;
    /**
     * Wait until the replSet has elected an Primary
     * @param timeout Timeout to not run infinitly
     */
    _waitForPrimary(timeout?: number): Promise<void>;
}
//# sourceMappingURL=MongoMemoryReplSet.d.ts.map