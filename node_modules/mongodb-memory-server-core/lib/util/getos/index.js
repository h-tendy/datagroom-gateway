"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isLinuxOS = void 0;
var fs_1 = require("fs");
var os_1 = require("os");
var child_process_1 = require("child_process");
var util_1 = require("util");
var path_1 = require("path");
var resolve_config_1 = __importDefault(require("../resolve-config"));
var debug_1 = __importDefault(require("debug"));
var db_util_1 = require("../db_util");
var log = debug_1.default('MongoMS:getos');
/** Collection of Regexes for "lsb_release -a" parsing */
var LSBRegex = {
    name: /^distributor id:\s*(.*)$/im,
    codename: /^codename:\s*(.*)$/im,
    release: /^release:\s*(.*)$/im,
};
/** Collection of Regexes for "/etc/os-release" parsing */
var OSRegex = {
    name: /^id\s*=\s*"?(.*)"?$/im,
    /** uses VERSION_CODENAME */
    codename: /^version_codename\s*=\s*(.*)$/im,
    release: /^version_id\s*=\s*"?(.*)"?$/im,
};
/**
 * Check if the OS is a LinuxOS Typeguard
 * @param os The OS object to check for
 */
function isLinuxOS(os) {
    return os.os === 'linux';
}
exports.isLinuxOS = isLinuxOS;
/** Get an OS object */
function getOS() {
    return __awaiter(this, void 0, void 0, function () {
        var osName;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    osName = os_1.platform();
                    if (!(osName === 'linux')) return [3 /*break*/, 2];
                    return [4 /*yield*/, getLinuxInfomation()];
                case 1: return [2 /*return*/, _a.sent()];
                case 2: return [2 /*return*/, { os: osName }];
            }
        });
    });
}
exports.default = getOS;
/** Function to outsource Linux Infomation Parsing */
function getLinuxInfomation() {
    return __awaiter(this, void 0, void 0, function () {
        var lsbOut, osOut, releaseOut;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!!db_util_1.isNullOrUndefined(resolve_config_1.default('USE_LINUX_LSB_RELEASE'))) return [3 /*break*/, 2];
                    log('Forced LSB-Release file!');
                    return [4 /*yield*/, tryLSBRelease()];
                case 1: return [2 /*return*/, (_a.sent())];
                case 2:
                    if (!!db_util_1.isNullOrUndefined(resolve_config_1.default('USE_LINUX_OS_RELEASE'))) return [3 /*break*/, 4];
                    log('Forced OS-Release file!');
                    return [4 /*yield*/, tryOSRelease()];
                case 3: return [2 /*return*/, (_a.sent())];
                case 4:
                    if (!!db_util_1.isNullOrUndefined(resolve_config_1.default('USE_LINUX_ANYFILE_RELEASE'))) return [3 /*break*/, 6];
                    log('Forced First *-Release file!');
                    return [4 /*yield*/, tryFirstReleaseFile()];
                case 5: return [2 /*return*/, (_a.sent())];
                case 6:
                    // Try everything
                    // Note: these values are stored, because this code should not use "inline value assignment"
                    log('Trying LSB-Release');
                    return [4 /*yield*/, tryLSBRelease()];
                case 7:
                    lsbOut = _a.sent();
                    if (!db_util_1.isNullOrUndefined(lsbOut)) {
                        return [2 /*return*/, lsbOut];
                    }
                    log('Trying OS-Release');
                    return [4 /*yield*/, tryOSRelease()];
                case 8:
                    osOut = _a.sent();
                    if (!db_util_1.isNullOrUndefined(osOut)) {
                        return [2 /*return*/, osOut];
                    }
                    log('Trying First *-Release file');
                    return [4 /*yield*/, tryFirstReleaseFile()];
                case 9:
                    releaseOut = _a.sent();
                    if (!db_util_1.isNullOrUndefined(releaseOut)) {
                        return [2 /*return*/, releaseOut];
                    }
                    log('Couldnt find an release file');
                    // if none has worked, return unkown
                    return [2 /*return*/, {
                            os: 'linux',
                            dist: 'unkown',
                            release: '',
                        }];
            }
        });
    });
}
/**
 * Try the "lsb_release" command, and if it works, parse it
 */
function tryLSBRelease() {
    return __awaiter(this, void 0, void 0, function () {
        var lsb, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, util_1.promisify(child_process_1.exec)('lsb_release -a')];
                case 1:
                    lsb = _a.sent();
                    return [2 /*return*/, parseLSB(lsb.stdout)];
                case 2:
                    err_1 = _a.sent();
                    // check if "USE_LINUX_LSB_RELEASE" is unset, when yes - just return to start the next try
                    if (db_util_1.isNullOrUndefined(resolve_config_1.default('USE_LINUX_LSB_RELEASE'))) {
                        return [2 /*return*/];
                    }
                    // otherwise throw the error
                    throw err_1;
                case 3: return [2 /*return*/];
            }
        });
    });
}
/**
 * Try to read the /etc/os-release file, and if it works, parse it
 */
function tryOSRelease() {
    return __awaiter(this, void 0, void 0, function () {
        var os, err_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, util_1.promisify(fs_1.readFile)('/etc/os-release')];
                case 1:
                    os = _a.sent();
                    return [2 /*return*/, parseOS(os.toString())];
                case 2:
                    err_2 = _a.sent();
                    // check if the error is an "ENOENT" OR "SKIP_OS_RELEASE" is set
                    // AND "USE_LINUX_OS_RELEASE" is unset
                    // and just return
                    if (((err_2 === null || err_2 === void 0 ? void 0 : err_2.code) === 'ENOENT' || !db_util_1.isNullOrUndefined(resolve_config_1.default('SKIP_OS_RELEASE'))) &&
                        db_util_1.isNullOrUndefined(resolve_config_1.default('USE_LINUX_OS_RELEASE'))) {
                        return [2 /*return*/];
                    }
                    // otherwise throw the error
                    throw err_2;
                case 3: return [2 /*return*/];
            }
        });
    });
}
/**
 * Try to read any /etc/*-release file, take the first, and if it works, parse it
 */
function tryFirstReleaseFile() {
    return __awaiter(this, void 0, void 0, function () {
        var file, os, err_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    return [4 /*yield*/, util_1.promisify(fs_1.readdir)('/etc')];
                case 1:
                    file = (_a.sent()).filter(function (v) {
                        // match if file ends with "-release"
                        return v.match(/.*-release$/im) &&
                            // check if the file does NOT contain "lsb"
                            !v.match(/lsb/im);
                    })[0];
                    if (db_util_1.isNullOrUndefined(file) || file.length <= 0) {
                        throw new Error('No release file found!');
                    }
                    return [4 /*yield*/, util_1.promisify(fs_1.readFile)(path_1.join('/etc/', file))];
                case 2:
                    os = _a.sent();
                    return [2 /*return*/, parseOS(os.toString())];
                case 3:
                    err_3 = _a.sent();
                    // check if the error is an "ENOENT" OR "SKIP_RELEASE" is set
                    // AND "USE_LINUX_RELEASE" is unset
                    // and just return
                    if ((err_3 === null || err_3 === void 0 ? void 0 : err_3.code) === 'ENOENT' && db_util_1.isNullOrUndefined(resolve_config_1.default('USE_LINUX_ANYFILE_RELEASE'))) {
                        return [2 /*return*/];
                    }
                    // otherwise throw the error
                    throw err_3;
                case 4: return [2 /*return*/];
            }
        });
    });
}
/** Function to outsource "lsb_release -a" parsing */
function parseLSB(input) {
    var _a, _b, _c, _d, _e;
    return {
        os: 'linux',
        dist: (_b = (_a = input.match(LSBRegex.name)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : 'unkown',
        codename: (_c = input.match(LSBRegex.codename)) === null || _c === void 0 ? void 0 : _c[1],
        release: (_e = (_d = input.match(LSBRegex.release)) === null || _d === void 0 ? void 0 : _d[1]) !== null && _e !== void 0 ? _e : '',
    };
}
/** Function to outsource "/etc/os-release" parsing */
function parseOS(input) {
    var _a, _b, _c, _d, _e;
    return {
        os: 'linux',
        dist: (_b = (_a = input.match(OSRegex.name)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : 'unkown',
        codename: (_c = input.match(OSRegex.codename)) === null || _c === void 0 ? void 0 : _c[1],
        release: (_e = (_d = input.match(OSRegex.release)) === null || _d === void 0 ? void 0 : _d[1]) !== null && _e !== void 0 ? _e : '',
    };
}
//# sourceMappingURL=index.js.map