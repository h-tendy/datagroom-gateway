"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var tmp = __importStar(require("tmp"));
var MongoBinary_1 = require("../MongoBinary");
var MongoInstance_1 = __importDefault(require("../MongoInstance"));
jasmine.DEFAULT_TIMEOUT_INTERVAL = 600000;
tmp.setGracefulCleanup();
var tmpDir;
beforeEach(function () {
    tmpDir = tmp.dirSync({ prefix: 'mongo-mem-', unsafeCleanup: true });
});
afterEach(function () {
    tmpDir.removeCallback();
});
describe('MongodbInstance', function () {
    it('should prepare command args', function () {
        var inst = new MongoInstance_1.default({
            instance: {
                port: 27333,
                dbPath: tmpDir.name,
                storageEngine: 'ephemeralForTest',
            },
        });
        expect(inst.prepareCommandArgs()).toEqual([
            '--bind_ip',
            '127.0.0.1',
            '--port',
            '27333',
            '--storageEngine',
            'ephemeralForTest',
            '--dbpath',
            tmpDir.name,
            '--noauth',
        ]);
    });
    it('should allow specifying replSet', function () {
        var inst = new MongoInstance_1.default({
            instance: {
                port: 27555,
                dbPath: tmpDir.name,
                replSet: 'testset',
            },
        });
        expect(inst.prepareCommandArgs()).toEqual([
            '--bind_ip',
            '127.0.0.1',
            '--port',
            '27555',
            '--dbpath',
            tmpDir.name,
            '--noauth',
            '--replSet',
            'testset',
        ]);
    });
    it('should be able to enable auth', function () {
        var inst = new MongoInstance_1.default({
            instance: {
                port: 27555,
                dbPath: tmpDir.name,
                auth: true,
            },
        });
        expect(inst.prepareCommandArgs()).toEqual([
            '--bind_ip',
            '127.0.0.1',
            '--port',
            '27555',
            '--dbpath',
            tmpDir.name,
            '--auth',
        ]);
    });
    it('should be able to pass arbitrary args', function () {
        var args = ['--notablescan', '--nounixsocket'];
        var inst = new MongoInstance_1.default({
            instance: {
                port: 27555,
                dbPath: tmpDir.name,
                args: args,
            },
        });
        expect(inst.prepareCommandArgs()).toEqual(['--bind_ip', '127.0.0.1', '--port', '27555', '--dbpath', tmpDir.name, '--noauth'].concat(args));
    });
    it('should start instance on port 27333', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mongod;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, MongoInstance_1.default.run({
                        instance: { port: 27333, dbPath: tmpDir.name },
                        binary: { version: MongoBinary_1.LATEST_VERSION },
                    })];
                case 1:
                    mongod = _a.sent();
                    expect(mongod.getPid()).toBeGreaterThan(0);
                    return [4 /*yield*/, mongod.kill()];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should throw error if port is busy', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mongod;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, MongoInstance_1.default.run({
                        instance: { port: 27444, dbPath: tmpDir.name },
                        binary: { version: MongoBinary_1.LATEST_VERSION },
                    })];
                case 1:
                    mongod = _a.sent();
                    return [4 /*yield*/, expect(MongoInstance_1.default.run({
                            instance: { port: 27444, dbPath: tmpDir.name },
                            binary: { version: MongoBinary_1.LATEST_VERSION },
                        })).rejects.toBeDefined()];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, mongod.kill()];
                case 3:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should await while mongo is killed', function () { return __awaiter(void 0, void 0, void 0, function () {
        function isPidRunning(p) {
            try {
                process.kill(p, 0);
                return true;
            }
            catch (e) {
                return e.code === 'EPERM';
            }
        }
        var mongod, pid, killerPid;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, MongoInstance_1.default.run({
                        instance: { port: 27445, dbPath: tmpDir.name },
                        binary: { version: MongoBinary_1.LATEST_VERSION },
                    })];
                case 1:
                    mongod = _b.sent();
                    pid = mongod.getPid();
                    killerPid = (_a = mongod.killerProcess) === null || _a === void 0 ? void 0 : _a.pid;
                    expect(pid).toBeGreaterThan(0);
                    expect(killerPid).toBeGreaterThan(0);
                    expect(isPidRunning(pid)).toBeTruthy();
                    expect(isPidRunning(killerPid)).toBeTruthy();
                    return [4 /*yield*/, mongod.kill()];
                case 2:
                    _b.sent();
                    expect(isPidRunning(pid)).toBeFalsy();
                    expect(isPidRunning(killerPid)).toBeFalsy();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should work with mongodb 4.0.3', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mongod, pid;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, MongoInstance_1.default.run({
                        instance: { port: 27445, dbPath: tmpDir.name },
                        binary: { version: '4.0.3' },
                    })];
                case 1:
                    mongod = _a.sent();
                    pid = mongod.getPid();
                    expect(pid).toBeGreaterThan(0);
                    return [4 /*yield*/, mongod.kill()];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=MongoInstance-test.js.map