"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var MongoBinaryDownloadUrl_1 = __importDefault(require("../MongoBinaryDownloadUrl"));
describe('MongoBinaryDownloadUrl', function () {
    describe('getDownloadUrl()', function () {
        describe('for mac', function () {
            it('latest', function () { return __awaiter(void 0, void 0, void 0, function () {
                var du, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            du = new MongoBinaryDownloadUrl_1.default({
                                platform: 'darwin',
                                arch: 'x64',
                                version: 'latest',
                            });
                            _a = expect;
                            return [4 /*yield*/, du.getDownloadUrl()];
                        case 1:
                            _a.apply(void 0, [_b.sent()]).toBe('https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-latest.tgz');
                            return [2 /*return*/];
                    }
                });
            }); });
            it('4.4', function () { return __awaiter(void 0, void 0, void 0, function () {
                var du, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            du = new MongoBinaryDownloadUrl_1.default({
                                platform: 'darwin',
                                arch: 'x64',
                                version: '4.4.0',
                            });
                            _a = expect;
                            return [4 /*yield*/, du.getDownloadUrl()];
                        case 1:
                            _a.apply(void 0, [_b.sent()]).toBe('https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-4.4.0.tgz');
                            return [2 /*return*/];
                    }
                });
            }); });
            it('above 3.0', function () { return __awaiter(void 0, void 0, void 0, function () {
                var du, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            du = new MongoBinaryDownloadUrl_1.default({
                                platform: 'darwin',
                                arch: 'x64',
                                version: '3.6.3',
                            });
                            _a = expect;
                            return [4 /*yield*/, du.getDownloadUrl()];
                        case 1:
                            _a.apply(void 0, [_b.sent()]).toBe('https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-3.6.3.tgz');
                            return [2 /*return*/];
                    }
                });
            }); });
            it('below and include 3.0', function () { return __awaiter(void 0, void 0, void 0, function () {
                var du, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            du = new MongoBinaryDownloadUrl_1.default({
                                platform: 'darwin',
                                arch: 'x64',
                                version: '3.0.0',
                            });
                            _a = expect;
                            return [4 /*yield*/, du.getDownloadUrl()];
                        case 1:
                            _a.apply(void 0, [_b.sent()]).toBe('https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.0.0.tgz');
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        it('for ubuntu x64', function () { return __awaiter(void 0, void 0, void 0, function () {
            var du, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        du = new MongoBinaryDownloadUrl_1.default({
                            platform: 'linux',
                            arch: 'x64',
                            version: '3.6.3',
                            os: {
                                os: 'linux',
                                dist: 'Ubuntu Linux',
                                release: '14.04',
                            },
                        });
                        _a = expect;
                        return [4 /*yield*/, du.getDownloadUrl()];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toBe('https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1404-3.6.3.tgz');
                        return [2 /*return*/];
                }
            });
        }); });
        it('for ubuntu arm64', function () { return __awaiter(void 0, void 0, void 0, function () {
            var du, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        du = new MongoBinaryDownloadUrl_1.default({
                            platform: 'linux',
                            arch: 'arm64',
                            version: '4.0.20',
                            os: {
                                os: 'linux',
                                dist: 'Ubuntu Linux',
                                release: '20.04',
                            },
                        });
                        _a = expect;
                        return [4 /*yield*/, du.getDownloadUrl()];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toBe('https://fastdl.mongodb.org/linux/mongodb-linux-arm64-ubuntu1604-4.0.20.tgz');
                        return [2 /*return*/];
                }
            });
        }); });
        it('for debian 81 for 3.6.3', function () { return __awaiter(void 0, void 0, void 0, function () {
            var du, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        du = new MongoBinaryDownloadUrl_1.default({
                            platform: 'linux',
                            arch: 'x64',
                            version: '3.6.3',
                            os: {
                                os: 'linux',
                                dist: 'debian',
                                release: '8.1',
                            },
                        });
                        _a = expect;
                        return [4 /*yield*/, du.getDownloadUrl()];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toBe('https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-debian81-3.6.3.tgz');
                        return [2 /*return*/];
                }
            });
        }); });
        it('for debian 10 for 4.0.20 should use debian 92 [#448]', function () { return __awaiter(void 0, void 0, void 0, function () {
            var du, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        du = new MongoBinaryDownloadUrl_1.default({
                            platform: 'linux',
                            arch: 'x64',
                            version: '4.0.20',
                            os: {
                                os: 'linux',
                                dist: 'debian',
                                release: '10',
                            },
                        });
                        _a = expect;
                        return [4 /*yield*/, du.getDownloadUrl()];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toBe('https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-debian92-4.0.20.tgz');
                        return [2 /*return*/];
                }
            });
        }); });
        describe('for win32 & windows', function () {
            it('3.6 (win32)', function () { return __awaiter(void 0, void 0, void 0, function () {
                var du, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            du = new MongoBinaryDownloadUrl_1.default({
                                platform: 'win32',
                                arch: 'x64',
                                version: '3.6.3',
                            });
                            _a = expect;
                            return [4 /*yield*/, du.getDownloadUrl()];
                        case 1:
                            _a.apply(void 0, [_b.sent()]).toBe('https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-3.6.3.zip');
                            return [2 /*return*/];
                    }
                });
            }); });
            it('4.0.14 (win32)', function () { return __awaiter(void 0, void 0, void 0, function () {
                var du, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            du = new MongoBinaryDownloadUrl_1.default({
                                platform: 'win32',
                                arch: 'x64',
                                version: '4.0.14',
                            });
                            _a = expect;
                            return [4 /*yield*/, du.getDownloadUrl()];
                        case 1:
                            _a.apply(void 0, [_b.sent()]).toBe('https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-4.0.14.zip');
                            return [2 /*return*/];
                    }
                });
            }); });
            it('4.2 (win32)', function () { return __awaiter(void 0, void 0, void 0, function () {
                var du, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            du = new MongoBinaryDownloadUrl_1.default({
                                platform: 'win32',
                                arch: 'x64',
                                version: '4.2.0',
                            });
                            _a = expect;
                            return [4 /*yield*/, du.getDownloadUrl()];
                        case 1:
                            _a.apply(void 0, [_b.sent()]).toBe('https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2012plus-4.2.0.zip');
                            return [2 /*return*/];
                    }
                });
            }); });
            it('4.4 (windows)', function () { return __awaiter(void 0, void 0, void 0, function () {
                var du, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            du = new MongoBinaryDownloadUrl_1.default({
                                platform: 'win32',
                                arch: 'x64',
                                version: '4.4.0',
                            });
                            _a = expect;
                            return [4 /*yield*/, du.getDownloadUrl()];
                        case 1:
                            _a.apply(void 0, [_b.sent()]).toBe('https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-4.4.0.zip');
                            return [2 /*return*/];
                    }
                });
            }); });
            it('latest (windows)', function () { return __awaiter(void 0, void 0, void 0, function () {
                var du, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            du = new MongoBinaryDownloadUrl_1.default({
                                platform: 'win32',
                                arch: 'x64',
                                version: 'latest',
                            });
                            _a = expect;
                            return [4 /*yield*/, du.getDownloadUrl()];
                        case 1:
                            _a.apply(void 0, [_b.sent()]).toBe('https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-latest.zip');
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        it('fallback', function () { return __awaiter(void 0, void 0, void 0, function () {
            var du, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        console.warn = jest.fn(); // mock it to prevent writing to console
                        du = new MongoBinaryDownloadUrl_1.default({
                            platform: 'linux',
                            arch: 'x64',
                            version: '3.6.3',
                            os: {
                                os: 'linux',
                                dist: 'Gentoo Linux',
                                release: '',
                            },
                        });
                        _a = expect;
                        return [4 /*yield*/, du.getDownloadUrl()];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toBe('https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.6.3.tgz');
                        expect(console.warn.mock.calls.length).toEqual(2);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('getUbuntuVersionString()', function () {
        var downloadUrl = new MongoBinaryDownloadUrl_1.default({
            platform: 'linux',
            arch: 'x64',
            version: '3.6.3',
        });
        it('should return a archive name for Ubuntu 14.10', function () {
            expect(downloadUrl.getUbuntuVersionString({
                os: 'linux',
                dist: 'Ubuntu Linux',
                release: '14.10',
            })).toBe('ubuntu1410-clang');
        });
        it('should return a archive name for Ubuntu 14.04', function () {
            expect(downloadUrl.getUbuntuVersionString({
                os: 'linux',
                dist: 'Ubuntu Linux',
                release: '14.04',
            })).toBe('ubuntu1404');
        });
        it('should return a archive name for Ubuntu 12.04', function () {
            expect(downloadUrl.getUbuntuVersionString({
                os: 'linux',
                dist: 'Ubuntu Linux',
                release: '12.04',
            })).toBe('ubuntu1204');
        });
        it('should return a archive name for Ubuntu 18.04', function () {
            var oldMongoVersion = downloadUrl.version;
            downloadUrl.version = '3.6.3';
            expect(downloadUrl.getUbuntuVersionString({
                os: 'linux',
                dist: 'Ubuntu Linux',
                release: '18.04',
            })).toBe('ubuntu1604');
            downloadUrl.version = '4.0.1';
            expect(downloadUrl.getUbuntuVersionString({
                os: 'linux',
                dist: 'Ubuntu Linux',
                release: '18.04',
            })).toBe('ubuntu1804');
            downloadUrl.version = oldMongoVersion;
        });
    });
    describe('getDebianVersionString()', function () {
        var downloadUrl = new MongoBinaryDownloadUrl_1.default({
            platform: 'linux',
            arch: 'x64',
            version: '3.6.3',
        });
        it('should return a archive name for debian 6.2', function () {
            expect(downloadUrl.getDebianVersionString({
                os: 'linux',
                dist: 'debian',
                release: '6.2',
            })).toBe('debian');
        });
        it('should return a archive name for debian 7.0', function () {
            expect(downloadUrl.getDebianVersionString({
                os: 'linux',
                dist: 'debian',
                release: '7.0',
            })).toBe('debian');
        });
        it('should return a archive name for debian 7.1', function () {
            expect(downloadUrl.getDebianVersionString({
                os: 'linux',
                dist: 'debian',
                release: '7.1',
            })).toBe('debian71');
        });
        it('should return a archive name for debian 8.0', function () {
            expect(downloadUrl.getDebianVersionString({
                os: 'linux',
                dist: 'debian',
                release: '8.0',
            })).toBe('debian71');
        });
        it('should return a archive name for debian 8.1', function () {
            expect(downloadUrl.getDebianVersionString({
                os: 'linux',
                dist: 'debian',
                release: '8.1',
            })).toBe('debian81');
        });
        it('should return a archive name for debian 9.0', function () {
            expect(downloadUrl.getDebianVersionString({
                os: 'linux',
                dist: 'debian',
                release: '9.0',
            })).toBe('debian92');
        });
    });
    describe('getMintVersionString', function () {
        var downloadUrl = new MongoBinaryDownloadUrl_1.default({
            platform: 'linux',
            arch: 'x64',
            version: '3.6.3',
        });
        it('should return a archive name for Linux Mint 17', function () {
            expect(downloadUrl.getMintVersionString({
                os: 'linux',
                dist: 'Linux Mint',
                release: '17',
            })).toBe('ubuntu1404');
        });
        it('should return a archive name for Linux Mint 18', function () {
            expect(downloadUrl.getMintVersionString({
                os: 'linux',
                dist: 'Linux Mint',
                release: '18',
            })).toBe('ubuntu1604');
        });
        it('should return a archive name for Linux Mint 19', function () {
            expect(downloadUrl.getMintVersionString({
                os: 'linux',
                dist: 'LinuxMint',
                release: '19',
            })).toBe('ubuntu1804');
        });
        it('should return a archive name for Linux Mint 20', function () {
            expect(downloadUrl.getMintVersionString({
                os: 'linux',
                dist: 'Linux Mint',
                release: '20',
            })).toBe('ubuntu1804');
        });
    });
    it('shouldnt detect linux mint when using peppermint', function () {
        var downloadUrl = new MongoBinaryDownloadUrl_1.default({
            platform: 'linux',
            arch: 'x64',
            version: '3.6.3',
        });
        expect(downloadUrl.getLinuxOSVersionString({
            os: 'linux',
            dist: 'Peppermint',
            release: '10',
        })).toBe('');
    });
    describe('getLegacyVersionString', function () {
        var downloadUrl = new MongoBinaryDownloadUrl_1.default({
            platform: 'linux',
            arch: 'x64',
            version: '3.6.3',
        });
        it('should return an archive name for Gentoo Linux', function () {
            expect(downloadUrl.getLegacyVersionString({ os: 'linux', dist: 'Gentoo Linux', release: '' })).toBe('');
        });
    });
});
//# sourceMappingURL=MongoBinaryDownloadUrl-test.js.map