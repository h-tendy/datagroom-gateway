"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var md5_file_1 = __importDefault(require("md5-file"));
var MongoBinaryDownload_1 = __importDefault(require("../MongoBinaryDownload"));
jest.mock('fs');
jest.mock('md5-file');
describe('MongoBinaryDownload', function () {
    afterEach(function () {
        delete process.env.MONGOMS_SKIP_MD5_CHECK;
    });
    it('checkMD5 attribute can be set via constructor parameter', function () {
        expect(new MongoBinaryDownload_1.default({ checkMD5: true }).checkMD5).toBe(true);
        expect(new MongoBinaryDownload_1.default({ checkMD5: false }).checkMD5).toBe(false);
    });
    it("if checkMD5 input parameter is missing, then it checks\nMONGOMS_MD5_CHECK environment variable", function () {
        expect(new MongoBinaryDownload_1.default({}).checkMD5).toBe(false);
        process.env.MONGOMS_MD5_CHECK = '1';
        expect(new MongoBinaryDownload_1.default({}).checkMD5).toBe(true);
    });
    it('should use direct download', function () { return __awaiter(void 0, void 0, void 0, function () {
        var du, callArg1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    process.env['yarn_https-proxy'] = '';
                    process.env['yarn_proxy'] = '';
                    process.env['npm_config_https-proxy'] = '';
                    process.env['npm_config_proxy'] = '';
                    process.env['https_proxy'] = '';
                    process.env['http_proxy'] = '';
                    du = new MongoBinaryDownload_1.default({});
                    du.httpDownload = jest.fn();
                    du.locationExists = jest.fn().mockReturnValue(false);
                    return [4 /*yield*/, du.download('https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-3.6.3.tgz')];
                case 1:
                    _a.sent();
                    expect(du.httpDownload).toHaveBeenCalledTimes(1);
                    callArg1 = du.httpDownload.mock.calls[0][0];
                    expect(callArg1.agent).toBeUndefined();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should skip download if binary tar exists', function () { return __awaiter(void 0, void 0, void 0, function () {
        var du;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    du = new MongoBinaryDownload_1.default({});
                    du.httpDownload = jest.fn();
                    du.locationExists = jest.fn().mockReturnValue(true);
                    return [4 /*yield*/, du.download('https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-3.6.3.tgz')];
                case 1:
                    _a.sent();
                    expect(du.httpDownload).not.toHaveBeenCalled();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should pick up proxy from env vars', function () { return __awaiter(void 0, void 0, void 0, function () {
        var du, callArg1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    process.env['yarn_https-proxy'] = 'http://user:pass@proxy:8080';
                    du = new MongoBinaryDownload_1.default({});
                    // $FlowFixMe
                    du.httpDownload = jest.fn();
                    du.locationExists = jest.fn().mockReturnValue(false);
                    return [4 /*yield*/, du.download('https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-3.6.3.tgz')];
                case 1:
                    _a.sent();
                    expect(du.httpDownload).toHaveBeenCalledTimes(1);
                    callArg1 = du.httpDownload.mock.calls[0][0];
                    expect(callArg1.agent).toBeDefined();
                    expect(callArg1.agent.proxy.href).toBe('http://user:pass@proxy:8080/');
                    return [2 /*return*/];
            }
        });
    }); });
    it('should not reject unauthorized when npm strict-ssl config is false', function () { return __awaiter(void 0, void 0, void 0, function () {
        var du, callArg1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // npm sets false config value as empty string in env vars
                    process.env['npm_config_strict_ssl'] = '';
                    du = new MongoBinaryDownload_1.default({});
                    du.httpDownload = jest.fn();
                    du.locationExists = jest.fn().mockReturnValue(false);
                    return [4 /*yield*/, du.download('https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-3.6.3.tgz')];
                case 1:
                    _a.sent();
                    expect(du.httpDownload).toHaveBeenCalledTimes(1);
                    callArg1 = du.httpDownload.mock.calls[0][0];
                    expect(callArg1.rejectUnauthorized).toBeDefined();
                    expect(callArg1.rejectUnauthorized).toBe(false);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should reject unauthorized when npm strict-ssl config is true', function () { return __awaiter(void 0, void 0, void 0, function () {
        var du, callArg1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // npm sets true config value as string 'true' in env vars
                    process.env['npm_config_strict_ssl'] = 'true';
                    du = new MongoBinaryDownload_1.default({});
                    du.httpDownload = jest.fn();
                    du.locationExists = jest.fn().mockReturnValue(false);
                    return [4 /*yield*/, du.download('https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-3.6.3.tgz')];
                case 1:
                    _a.sent();
                    expect(du.httpDownload).toHaveBeenCalledTimes(1);
                    callArg1 = du.httpDownload.mock.calls[0][0];
                    expect(callArg1.rejectUnauthorized).toBeDefined();
                    expect(callArg1.rejectUnauthorized).toBe(true);
                    return [2 /*return*/];
            }
        });
    }); });
    it("makeMD5check returns true if md5 of downloaded mongoDBArchive is\nthe same as in the reference result", function () {
        var someMd5 = 'md5';
        fs_1.default.readFileSync.mockImplementationOnce(function () { return someMd5 + " fileName"; });
        md5_file_1.default.sync.mockImplementationOnce(function () { return someMd5; });
        var mongoDBArchivePath = '/some/path';
        var fileWithReferenceMd5 = '/another/path';
        var du = new MongoBinaryDownload_1.default({});
        // $FlowFixMe
        du.download = jest.fn(function () { return Promise.resolve(fileWithReferenceMd5); });
        var urlToMongoDBArchivePath = 'some-url';
        du.checkMD5 = true;
        return du.makeMD5check(urlToMongoDBArchivePath, mongoDBArchivePath).then(function (res) {
            expect(res).toBe(true);
            expect(du.download).toBeCalledWith(urlToMongoDBArchivePath);
            expect(fs_1.default.readFileSync).toBeCalledWith(fileWithReferenceMd5);
            expect(md5_file_1.default.sync).toBeCalledWith(mongoDBArchivePath);
        });
    });
    it("makeMD5check throws an error if md5 of downloaded mongoDBArchive is NOT\n  the same as in the reference result", function () {
        fs_1.default.readFileSync.mockImplementationOnce(function () { return 'someMd5 fileName'; });
        md5_file_1.default.sync.mockImplementationOnce(function () { return 'anotherMd5'; });
        var du = new MongoBinaryDownload_1.default({});
        du.checkMD5 = true;
        du.download = jest.fn(function () { return Promise.resolve(''); });
        expect(du.makeMD5check('', '')).rejects.toMatchInlineSnapshot("[Error: MongoBinaryDownload: md5 check failed]");
    });
    it('false value of checkMD5 attribute disables makeMD5check validation', function () { return __awaiter(void 0, void 0, void 0, function () {
        var du, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(1);
                    fs_1.default.readFileSync.mockImplementationOnce(function () { return 'someMd5 fileName'; });
                    md5_file_1.default.sync.mockImplementationOnce(function () { return 'anotherMd5'; });
                    du = new MongoBinaryDownload_1.default({});
                    du.checkMD5 = false;
                    return [4 /*yield*/, du.makeMD5check('', '')];
                case 1:
                    result = _a.sent();
                    expect(result).toBe(undefined);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=MongoBinaryDownload-test.js.map