"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var os_1 = __importDefault(require("os"));
var url_1 = __importDefault(require("url"));
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
var md5_file_1 = __importDefault(require("md5-file"));
var https_1 = __importDefault(require("https"));
var zlib_1 = require("zlib");
var tar_stream_1 = __importDefault(require("tar-stream"));
var yauzl_1 = __importDefault(require("yauzl"));
var MongoBinaryDownloadUrl_1 = __importDefault(require("./MongoBinaryDownloadUrl"));
var MongoBinary_1 = require("./MongoBinary");
var https_proxy_agent_1 = require("https-proxy-agent");
var util_1 = require("util");
var resolve_config_1 = __importStar(require("./resolve-config"));
var debug_1 = __importDefault(require("debug"));
var log = debug_1.default('MongoMS:MongoBinaryDownload');
/**
 * Download and extract the "mongod" binary
 */
var MongoBinaryDownload = /** @class */ (function () {
    function MongoBinaryDownload(_a) {
        var platform = _a.platform, arch = _a.arch, downloadDir = _a.downloadDir, version = _a.version, checkMD5 = _a.checkMD5;
        this.platform = platform !== null && platform !== void 0 ? platform : os_1.default.platform();
        this.arch = arch !== null && arch !== void 0 ? arch : os_1.default.arch();
        this.version = version !== null && version !== void 0 ? version : MongoBinary_1.LATEST_VERSION;
        this.downloadDir = path_1.default.resolve(downloadDir || 'mongodb-download');
        this.checkMD5 = checkMD5 !== null && checkMD5 !== void 0 ? checkMD5 : resolve_config_1.envToBool(resolve_config_1.default('MD5_CHECK'));
        this.dlProgress = {
            current: 0,
            length: 0,
            totalMb: 0,
            lastPrintedAt: 0,
        };
    }
    /**
     * Get the path of the already downloaded "mongod" file
     * otherwise download it and then return the path
     */
    MongoBinaryDownload.prototype.getMongodPath = function () {
        return __awaiter(this, void 0, void 0, function () {
            var binaryName, mongodPath, mongoDBArchive;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        binaryName = this.platform === 'win32' ? 'mongod.exe' : 'mongod';
                        mongodPath = path_1.default.resolve(this.downloadDir, this.version, binaryName);
                        return [4 /*yield*/, this.locationExists(mongodPath)];
                    case 1:
                        if (_a.sent()) {
                            return [2 /*return*/, mongodPath];
                        }
                        return [4 /*yield*/, this.startDownload()];
                    case 2:
                        mongoDBArchive = _a.sent();
                        return [4 /*yield*/, this.extract(mongoDBArchive)];
                    case 3:
                        _a.sent();
                        fs_1.default.unlinkSync(mongoDBArchive);
                        return [4 /*yield*/, this.locationExists(mongodPath)];
                    case 4:
                        if (_a.sent()) {
                            return [2 /*return*/, mongodPath];
                        }
                        throw new Error("Cannot find downloaded mongod binary by path " + mongodPath);
                }
            });
        });
    };
    /**
     * Download the MongoDB Archive and check it against an MD5
     * @returns The MongoDB Archive location
     */
    MongoBinaryDownload.prototype.startDownload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var mbdUrl, downloadUrl, mongoDBArchive;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mbdUrl = new MongoBinaryDownloadUrl_1.default({
                            platform: this.platform,
                            arch: this.arch,
                            version: this.version,
                        });
                        if (!fs_1.default.existsSync(this.downloadDir)) {
                            fs_1.default.mkdirSync(this.downloadDir);
                        }
                        return [4 /*yield*/, mbdUrl.getDownloadUrl()];
                    case 1:
                        downloadUrl = _a.sent();
                        return [4 /*yield*/, this.download(downloadUrl)];
                    case 2:
                        mongoDBArchive = _a.sent();
                        return [4 /*yield*/, this.makeMD5check(downloadUrl + ".md5", mongoDBArchive)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, mongoDBArchive];
                }
            });
        });
    };
    /**
     * Download MD5 file and check it against the MongoDB Archive
     * @param urlForReferenceMD5 URL to download the MD5
     * @param mongoDBArchive The MongoDB Archive file location
     */
    MongoBinaryDownload.prototype.makeMD5check = function (urlForReferenceMD5, mongoDBArchive) {
        return __awaiter(this, void 0, void 0, function () {
            var mongoDBArchiveMd5, signatureContent, m, md5Remote, md5Local;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.checkMD5) {
                            return [2 /*return*/, undefined];
                        }
                        log('Checking MD5 of downloaded binary...');
                        return [4 /*yield*/, this.download(urlForReferenceMD5)];
                    case 1:
                        mongoDBArchiveMd5 = _a.sent();
                        signatureContent = fs_1.default.readFileSync(mongoDBArchiveMd5).toString('utf-8');
                        m = signatureContent.match(/(.*?)\s/);
                        md5Remote = m ? m[1] : null;
                        md5Local = md5_file_1.default.sync(mongoDBArchive);
                        log("Local MD5: " + md5Local + ", Remote MD5: " + md5Remote);
                        if (md5Remote !== md5Local) {
                            throw new Error('MongoBinaryDownload: md5 check failed');
                        }
                        return [2 /*return*/, true];
                }
            });
        });
    };
    /**
     * Download file from downloadUrl
     * @param downloadUrl URL to download a File
     */
    MongoBinaryDownload.prototype.download = function (downloadUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var proxy, strictSsl, urlObject, downloadOptions, filename, downloadLocation, tempDownloadLocation, downloadedFile;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        proxy = process.env['yarn_https-proxy'] ||
                            process.env.yarn_proxy ||
                            process.env['npm_config_https-proxy'] ||
                            process.env.npm_config_proxy ||
                            process.env.https_proxy ||
                            process.env.http_proxy ||
                            process.env.HTTPS_PROXY ||
                            process.env.HTTP_PROXY;
                        strictSsl = process.env.npm_config_strict_ssl === 'true';
                        urlObject = url_1.default.parse(downloadUrl);
                        if (!urlObject.hostname || !urlObject.path) {
                            throw new Error("Provided incorrect download url: " + downloadUrl);
                        }
                        downloadOptions = {
                            hostname: urlObject.hostname,
                            port: urlObject.port || '443',
                            path: urlObject.path,
                            method: 'GET',
                            rejectUnauthorized: strictSsl,
                            agent: proxy ? new https_proxy_agent_1.HttpsProxyAgent(proxy) : undefined,
                        };
                        filename = (urlObject.pathname || '').split('/').pop();
                        if (!filename) {
                            throw new Error("MongoBinaryDownload: missing filename for url " + downloadUrl);
                        }
                        downloadLocation = path_1.default.resolve(this.downloadDir, filename);
                        tempDownloadLocation = path_1.default.resolve(this.downloadDir, filename + ".downloading");
                        log("Downloading" + (proxy ? " via proxy " + proxy : '') + ": \"" + downloadUrl + "\"");
                        return [4 /*yield*/, this.locationExists(downloadLocation)];
                    case 1:
                        if (_a.sent()) {
                            log('Already downloaded archive found, skipping download');
                            return [2 /*return*/, downloadLocation];
                        }
                        this._downloadingUrl = downloadUrl;
                        return [4 /*yield*/, this.httpDownload(downloadOptions, downloadLocation, tempDownloadLocation)];
                    case 2:
                        downloadedFile = _a.sent();
                        return [2 /*return*/, downloadedFile];
                }
            });
        });
    };
    /**
     * Extract given Archive
     * @param mongoDBArchive Archive location
     * @returns extracted directory location
     */
    MongoBinaryDownload.prototype.extract = function (mongoDBArchive) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var binaryName, extractDir, filter;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        binaryName = this.platform === 'win32' ? 'mongod.exe' : 'mongod';
                        extractDir = path_1.default.resolve(this.downloadDir, this.version);
                        log("extract(): " + extractDir);
                        if (!fs_1.default.existsSync(extractDir)) {
                            fs_1.default.mkdirSync(extractDir);
                        }
                        if (this.platform === 'win32') {
                            filter = function (file) {
                                return /bin\/mongod.exe$/.test(file) || /.dll$/.test(file);
                            };
                        }
                        else {
                            filter = function (file) { return /bin\/mongod$/.test(file); };
                        }
                        if (!/(.tar.gz|.tgz)$/.test(path_1.default.extname(mongoDBArchive))) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.extractTarGz(mongoDBArchive, extractDir, filter)];
                    case 1:
                        _c.sent();
                        return [3 /*break*/, 5];
                    case 2:
                        if (!/.zip$/.test(path_1.default.extname(mongoDBArchive))) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.extractZip(mongoDBArchive, extractDir, filter)];
                    case 3:
                        _c.sent();
                        return [3 /*break*/, 5];
                    case 4: throw new Error("MongoBinaryDownload: unsupported archive " + mongoDBArchive + " (downloaded from " + ((_a = this._downloadingUrl) !== null && _a !== void 0 ? _a : 'unkown') + "). Broken archive from MongoDB Provider?");
                    case 5: return [4 /*yield*/, this.locationExists(path_1.default.resolve(this.downloadDir, this.version, binaryName))];
                    case 6:
                        if (!(_c.sent())) {
                            throw new Error("MongoBinaryDownload: missing mongod binary in " + mongoDBArchive + " (downloaded from " + ((_b = this._downloadingUrl) !== null && _b !== void 0 ? _b : 'unkown') + "). Broken archive from MongoDB Provider?");
                        }
                        return [2 /*return*/, extractDir];
                }
            });
        });
    };
    /**
     * Extract a .tar.gz archive
     * @param mongoDBArchive Archive location
     * @param extractDir Directory to extract to
     * @param filter Method to determine which files to extract
     */
    MongoBinaryDownload.prototype.extractTarGz = function (mongoDBArchive, extractDir, filter) {
        return __awaiter(this, void 0, void 0, function () {
            var extract;
            return __generator(this, function (_a) {
                extract = tar_stream_1.default.extract();
                extract.on('entry', function (header, stream, next) {
                    if (filter(header.name)) {
                        stream.pipe(fs_1.default.createWriteStream(path_1.default.resolve(extractDir, path_1.default.basename(header.name)), {
                            mode: 509,
                        }));
                    }
                    stream.on('end', function () { return next(); });
                    stream.resume();
                });
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        fs_1.default.createReadStream(mongoDBArchive)
                            .on('error', function (err) {
                            reject('Unable to open tarball ' + mongoDBArchive + ': ' + err);
                        })
                            .pipe(zlib_1.createUnzip())
                            .on('error', function (err) {
                            reject('Error during unzip for ' + mongoDBArchive + ': ' + err);
                        })
                            .pipe(extract)
                            .on('error', function (err) {
                            reject('Error during untar for ' + mongoDBArchive + ': ' + err);
                        })
                            .on('finish', function (result) {
                            resolve(result);
                        });
                    })];
            });
        });
    };
    /**
     * Extract a .zip archive
     * @param mongoDBArchive Archive location
     * @param extractDir Directory to extract to
     * @param filter Method to determine which files to extract
     */
    MongoBinaryDownload.prototype.extractZip = function (mongoDBArchive, extractDir, filter) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        yauzl_1.default.open(mongoDBArchive, { lazyEntries: true }, function (e, zipfile) {
                            if (e || !zipfile) {
                                return reject(e);
                            }
                            zipfile.readEntry();
                            zipfile.on('end', function () { return resolve(); });
                            zipfile.on('entry', function (entry) {
                                if (!filter(entry.fileName)) {
                                    return zipfile.readEntry();
                                }
                                zipfile.openReadStream(entry, function (e, r) {
                                    if (e || !r) {
                                        return reject(e);
                                    }
                                    r.on('end', function () { return zipfile.readEntry(); });
                                    r.pipe(fs_1.default.createWriteStream(path_1.default.resolve(extractDir, path_1.default.basename(entry.fileName)), {
                                        mode: 509,
                                    }));
                                });
                            });
                        });
                    })];
            });
        });
    };
    /**
     * Downlaod given httpOptions to tempDownloadLocation, then move it to downloadLocation
     * @param httpOptions The httpOptions directly passed to https.get
     * @param downloadLocation The location the File should be after the download
     * @param tempDownloadLocation The location the File should be while downloading
     */
    MongoBinaryDownload.prototype.httpDownload = function (httpOptions, downloadLocation, tempDownloadLocation) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var fileStream = fs_1.default.createWriteStream(tempDownloadLocation);
                        log("trying to download https://" + httpOptions.hostname + httpOptions.path);
                        https_1.default
                            .get(httpOptions, function (response) {
                            // "as any" because otherwise the "agent" wouldnt match
                            if (response.statusCode != 200) {
                                if (response.statusCode === 403) {
                                    reject(new Error("Status Code is 403 (MongoDB's 404)\n" +
                                        "This means that the requested version-platform combination doesn't exist\n" +
                                        ("  Used Url: \"https://" + httpOptions.hostname + httpOptions.path + "\"\n") +
                                        "Try to use different version 'new MongoMemoryServer({ binary: { version: 'X.Y.Z' } })'\n" +
                                        'List of available versions can be found here:\n' +
                                        '  https://www.mongodb.org/dl/linux for Linux\n' +
                                        '  https://www.mongodb.org/dl/osx for OSX\n' +
                                        '  https://www.mongodb.org/dl/win32 for Windows'));
                                    return;
                                }
                                reject(new Error('Status Code isnt 200!'));
                                return;
                            }
                            if (typeof response.headers['content-length'] != 'string') {
                                reject(new Error('Response header "content-length" is empty!'));
                                return;
                            }
                            _this.dlProgress.current = 0;
                            _this.dlProgress.length = parseInt(response.headers['content-length'], 10);
                            _this.dlProgress.totalMb = Math.round((_this.dlProgress.length / 1048576) * 10) / 10;
                            response.pipe(fileStream);
                            fileStream.on('finish', function () { return __awaiter(_this, void 0, void 0, function () {
                                var downloadUrl;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (this.dlProgress.current < this.dlProgress.length &&
                                                !httpOptions.path.endsWith('.md5')) {
                                                downloadUrl = this._downloadingUrl || "https://" + httpOptions.hostname + "/" + httpOptions.path;
                                                reject(new Error("Too small (" + this.dlProgress.current + " bytes) mongod binary downloaded from " + downloadUrl));
                                                return [2 /*return*/];
                                            }
                                            fileStream.close();
                                            return [4 /*yield*/, util_1.promisify(fs_1.default.rename)(tempDownloadLocation, downloadLocation)];
                                        case 1:
                                            _a.sent();
                                            log("moved " + tempDownloadLocation + " to " + downloadLocation);
                                            resolve(downloadLocation);
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                            response.on('data', function (chunk) {
                                _this.printDownloadProgress(chunk);
                            });
                        })
                            .on('error', function (e) {
                            // log it without having debug enabled
                            console.error("Couldnt download " + httpOptions.path + "!", e.message);
                            reject(e);
                        });
                    })];
            });
        });
    };
    /**
     * Print the Download Progress to STDOUT
     * @param chunk A chunk to get the length
     */
    MongoBinaryDownload.prototype.printDownloadProgress = function (chunk) {
        this.dlProgress.current += chunk.length;
        var now = Date.now();
        if (now - this.dlProgress.lastPrintedAt < 2000) {
            return;
        }
        this.dlProgress.lastPrintedAt = now;
        var percentComplete = Math.round(((100.0 * this.dlProgress.current) / this.dlProgress.length) * 10) / 10;
        var mbComplete = Math.round((this.dlProgress.current / 1048576) * 10) / 10;
        var crReturn = this.platform === 'win32' ? '\x1b[0G' : '\r';
        var message = "Downloading MongoDB " + this.version + ": " + percentComplete + " % (" + mbComplete + "mb / " + this.dlProgress.totalMb + "mb)" + crReturn;
        if (process.stdout.isTTY) {
            // if TTY overwrite last line over and over until finished
            process.stdout.write(message);
        }
        else {
            console.log(message);
        }
    };
    /**
     * Test if the location given is already used
     * Does *not* dereference links
     * @param location The Path to test
     */
    MongoBinaryDownload.prototype.locationExists = function (location) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, util_1.promisify(fs_1.default.lstat)(location)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 2:
                        e_1 = _a.sent();
                        if (e_1.code !== 'ENOENT') {
                            throw e_1;
                        }
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return MongoBinaryDownload;
}());
exports.default = MongoBinaryDownload;
//# sourceMappingURL=MongoBinaryDownload.js.map