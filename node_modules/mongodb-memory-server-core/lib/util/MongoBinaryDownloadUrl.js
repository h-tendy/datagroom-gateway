"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var getos_1 = __importDefault(require("./getos"));
var child_process_1 = require("child_process");
var resolve_config_1 = __importDefault(require("./resolve-config"));
var debug_1 = __importDefault(require("debug"));
var semver = __importStar(require("semver"));
var db_util_1 = require("./db_util");
var log = debug_1.default('MongoMS:MongoBinaryDownloadUrl');
/**
 * Download URL generator
 */
var MongoBinaryDownloadUrl = /** @class */ (function () {
    function MongoBinaryDownloadUrl(_a) {
        var platform = _a.platform, arch = _a.arch, version = _a.version, os = _a.os;
        this.version = version;
        this.platform = this.translatePlatform(platform);
        this.arch = this.translateArch(arch, this.platform);
        this.os = os;
    }
    /**
     * Assemble the URL to download
     * Calls all the necessary functions to determine the URL
     */
    MongoBinaryDownloadUrl.prototype.getDownloadUrl = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var archive, downloadUrl, mirror;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getArchiveName()];
                    case 1:
                        archive = _b.sent();
                        log("Using \"" + archive + "\" as the Archive String");
                        downloadUrl = resolve_config_1.default('DOWNLOAD_URL');
                        if (downloadUrl) {
                            log("Using \"" + downloadUrl + "\" as the Download-URL");
                            return [2 /*return*/, downloadUrl];
                        }
                        mirror = (_a = resolve_config_1.default('DOWNLOAD_MIRROR')) !== null && _a !== void 0 ? _a : 'https://fastdl.mongodb.org';
                        log("Using \"" + mirror + "\" as the mirror");
                        return [2 /*return*/, mirror + "/" + this.platform + "/" + archive];
                }
            });
        });
    };
    /**
     * Get the archive
     * Version independent
     */
    MongoBinaryDownloadUrl.prototype.getArchiveName = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (this.platform) {
                    case 'osx':
                        return [2 /*return*/, this.getArchiveNameOsx()];
                    case 'win32':
                    case 'windows':
                        return [2 /*return*/, this.getArchiveNameWin()];
                    case 'linux':
                    default:
                        return [2 /*return*/, this.getArchiveNameLinux()];
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Get the archive for Windows
     * (from: https://www.mongodb.org/dl/win32)
     */
    MongoBinaryDownloadUrl.prototype.getArchiveNameWin = function () {
        return __awaiter(this, void 0, void 0, function () {
            var name;
            return __generator(this, function (_a) {
                name = "mongodb-" + this.platform;
                name += "-" + this.arch;
                if (!db_util_1.isNullOrUndefined(semver.coerce(this.version))) {
                    if (semver.satisfies(this.version, '4.2.x')) {
                        name += '-2012plus';
                    }
                    else if (semver.lt(this.version, '4.1.0')) {
                        name += '-2008plus-ssl';
                    }
                }
                name += "-" + this.version + ".zip";
                return [2 /*return*/, name];
            });
        });
    };
    /**
     * Get the archive for OSX (Mac)
     * (from: https://www.mongodb.org/dl/osx)
     */
    MongoBinaryDownloadUrl.prototype.getArchiveNameOsx = function () {
        return __awaiter(this, void 0, void 0, function () {
            var name, version;
            return __generator(this, function (_a) {
                name = "mongodb-osx";
                version = semver.coerce(this.version);
                if (!db_util_1.isNullOrUndefined(version) && semver.gte(version, '3.2.0')) {
                    name += '-ssl';
                }
                if (db_util_1.isNullOrUndefined(version) || semver.gte(version, '4.2.0')) {
                    name = "mongodb-macos"; // somehow these files are not listed in https://www.mongodb.org/dl/osx
                }
                name += "-" + this.arch;
                name += "-" + this.version + ".tgz";
                return [2 /*return*/, name];
            });
        });
    };
    /**
     * Get the archive for Linux
     * (from: https://www.mongodb.org/dl/linux)
     */
    MongoBinaryDownloadUrl.prototype.getArchiveNameLinux = function () {
        return __awaiter(this, void 0, void 0, function () {
            var name, osString, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        name = "mongodb-linux";
                        name += "-" + this.arch;
                        if (!(this.arch !== 'i686')) return [3 /*break*/, 3];
                        if (!!this.os) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, getos_1.default()];
                    case 1:
                        _a.os = _b.sent();
                        _b.label = 2;
                    case 2:
                        osString = this.getLinuxOSVersionString(this.os);
                        _b.label = 3;
                    case 3:
                        if (osString) {
                            name += "-" + osString;
                        }
                        name += "-" + this.version + ".tgz";
                        return [2 /*return*/, name];
                }
            });
        });
    };
    /**
     * Get the version string (with distro)
     * @param os LinuxOS Object
     */
    MongoBinaryDownloadUrl.prototype.getLinuxOSVersionString = function (os) {
        if (/ubuntu/i.test(os.dist)) {
            return this.getUbuntuVersionString(os);
        }
        else if (/elementary OS/i.test(os.dist)) {
            return this.getElementaryOSVersionString(os);
        }
        else if (/suse/i.test(os.dist)) {
            return this.getSuseVersionString(os);
        }
        else if (/rhel/i.test(os.dist) || /centos/i.test(os.dist) || /scientific/i.test(os.dist)) {
            return this.getRhelVersionString(os);
        }
        else if (/fedora/i.test(os.dist)) {
            return this.getFedoraVersionString(os);
        }
        else if (/debian/i.test(os.dist)) {
            return this.getDebianVersionString(os);
        }
        else if (/^linux\s?mint\s*$/i.test(os.dist)) {
            return this.getMintVersionString(os);
        }
        else if (/arch/i.test(os.dist)) {
            console.warn('There is no offical build of MongoDB for ArchLinux!');
        }
        else if (/alpine/i.test(os.dist)) {
            console.warn('There is no offical build of MongoDB for Alpine!');
        }
        else if (/unkown/i.test(os.dist)) {
            // "unkown" is likely to happen if no release file / command could be found
            console.warn('Couldnt parse dist infomation, please report this to https://github.com/nodkz/mongodb-memory-server/issues');
        }
        else {
            // warn if no case for the *parsed* distro is found
            console.warn("Unknown linux distro " + os.dist);
        }
        // warn for the fallback
        console.warn("Falling back to legacy MongoDB build!");
        return this.getLegacyVersionString(os);
    };
    /**
     * Get the version string for Debain
     * @param os LinuxOS Object
     */
    MongoBinaryDownloadUrl.prototype.getDebianVersionString = function (os) {
        var name = 'debian';
        var release = parseFloat(os.release);
        if (release >= 10 || ['unstable', 'testing'].includes(os.release)) {
            if (semver.lte(this.version, '4.2.0')) {
                log("getDebianVersionString: requested version \"" + this.version + "\" not available for osrelease \"" + release + "\", using \"92\"");
                name += '92';
            }
            else {
                name += '10';
            }
        }
        else if (release >= 9) {
            name += '92';
        }
        else if (release >= 8.1) {
            name += '81';
        }
        else if (release >= 7.1) {
            name += '71';
        }
        return name;
    };
    /**
     * Get the version string for Fedora
     * @param os LinuxOS Object
     */
    MongoBinaryDownloadUrl.prototype.getFedoraVersionString = function (os) {
        var name = 'rhel';
        var fedoraVer = parseInt(os.release, 10);
        if (fedoraVer > 18) {
            name += '70';
        }
        else if (fedoraVer < 19 && fedoraVer >= 12) {
            name += '62';
        }
        else if (fedoraVer < 12 && fedoraVer >= 6) {
            name += '55';
        }
        return name;
    };
    /**
     * Get the version string for Red Hat Enterprise Linux
     * @param os LinuxOS Object
     */
    MongoBinaryDownloadUrl.prototype.getRhelVersionString = function (os) {
        var name = 'rhel';
        var release = os.release;
        if (release) {
            if (/^8/.test(release)) {
                name += '80';
            }
            else if (/^7/.test(release)) {
                name += '70';
            }
            else if (/^6/.test(release)) {
                name += '62';
            }
            else if (/^5/.test(release)) {
                name += '55';
            }
        }
        return name;
    };
    /**
     * Get the version string for ElementaryOS
     * @param os LinuxOS Object
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    MongoBinaryDownloadUrl.prototype.getElementaryOSVersionString = function (os) {
        // Elementary specific - get used ubuntu version
        var ubuntuVersion = child_process_1.execSync('/usr/bin/lsb_release -u -rs');
        try {
            // confirm it is actually a version, otherwise throw an error
            parseFloat(ubuntuVersion.toString());
            return "ubuntu" + ubuntuVersion.toString().replace('.', '').trim();
        }
        catch (err) {
            console.error('ElementaryOS "lsb_relese -u -rs" couldnt be executed!');
            throw err;
        }
    };
    /**
     * Get the version string for Linux Mint
     * @param os LinuxOS Object
     */
    MongoBinaryDownloadUrl.prototype.getMintVersionString = function (os) {
        var name = 'ubuntu';
        var mintMajorVer = parseInt(os.release ? os.release.split('.')[0] : os.release);
        if (mintMajorVer < 17) {
            throw new Error('Mint Versions under 17 are not supported!');
        }
        switch (mintMajorVer) {
            case 17:
                name += '1404';
                break;
            case 18:
                name += '1604';
                break;
            case 20: // because "1804" binaries also work on "2004" (and because earlier versions than 4.4 are not available in "2004")
            case 19:
            default:
                // a default to support versions > 19
                name += '1804';
                break;
        }
        return name;
    };
    /**
     * Linux Fallback
     * @param os LinuxOS Object
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    MongoBinaryDownloadUrl.prototype.getLegacyVersionString = function (os) {
        return '';
    };
    /**
     * Get the version string for Suse / OpenSuse
     * @param os LinuxOS Object
     */
    MongoBinaryDownloadUrl.prototype.getSuseVersionString = function (os) {
        var releaseMatch = os.release.match(/(^11|^12)/);
        return releaseMatch ? "suse" + releaseMatch[0] : '';
    };
    /**
     * Get the version string for Ubuntu
     * @param os LinuxOS Object
     */
    MongoBinaryDownloadUrl.prototype.getUbuntuVersionString = function (os) {
        var name = 'ubuntu';
        var ubuntuVer = os.release ? os.release.split('.') : [];
        var majorVer = parseInt(ubuntuVer[0], 10);
        // const minorVer: string = ubuntuVer[1];
        // this is, because currently mongodb only really provides arm64 binaries for "ubuntu1604"
        if (this.arch === 'arm64') {
            log('getUbuntuVersionString: architecture "arm64" detected, using ubuntu1604');
            return 'ubuntu1604';
        }
        if (os.release === '12.04') {
            name += '1204';
        }
        else if (os.release === '14.04') {
            name += '1404';
        }
        else if (os.release === '14.10') {
            name += '1410-clang';
        }
        else if (majorVer === 14) {
            name += '1404';
        }
        else if (os.release === '16.04') {
            name += '1604';
        }
        else if (majorVer === 16) {
            name += '1604';
        }
        else if (majorVer >= 18) {
            if (this.version && this.version.indexOf('3.') === 0) {
                // For MongoDB 3.x using 1604 binaries, download distro does not have builds for Ubuntu 1804
                // https://www.mongodb.org/dl/linux/x86_64-ubuntu1604
                name += '1604';
            }
            else {
                // See fulllist of versions https://www.mongodb.org/dl/linux/x86_64-ubuntu1804
                name += '1804';
            }
        }
        else {
            name += '1404';
        }
        return name;
    };
    /**
     * Translate input platform to mongodb useable platfrom
     * @example
     * darwin -> osx
     * @param platform The Platform to translate
     */
    MongoBinaryDownloadUrl.prototype.translatePlatform = function (platform) {
        switch (platform) {
            case 'darwin':
                return 'osx';
            case 'win32':
                var version = semver.coerce(this.version);
                if (db_util_1.isNullOrUndefined(version)) {
                    return 'windows';
                }
                return semver.gte(version, '4.3.0') ? 'windows' : 'win32';
            case 'linux':
            case 'elementary OS':
                return 'linux';
            case 'sunos':
                return 'sunos5';
            default:
                throw new Error("unsupported OS " + platform);
        }
    };
    /**
     * Translate input arch to mongodb useable arch
     * @example
     * x64 -> x86_64
     * @param platform The Platform to translate
     */
    MongoBinaryDownloadUrl.prototype.translateArch = function (arch, mongoPlatform) {
        switch (arch) {
            case 'ia32':
                if (mongoPlatform === 'linux') {
                    return 'i686';
                }
                else if (mongoPlatform === 'win32') {
                    return 'i386';
                }
                throw new Error("Unsupported Architecture-Platform combination: arch: \"" + arch + "\", platform: \"" + mongoPlatform + "\"");
            case 'x64':
                return 'x86_64';
            case 'arm64':
                return 'arm64';
            default:
                throw new Error("Unsupported Architecture: arch: \"" + arch + "\"");
        }
    };
    return MongoBinaryDownloadUrl;
}());
exports.default = MongoBinaryDownloadUrl;
//# sourceMappingURL=MongoBinaryDownloadUrl.js.map